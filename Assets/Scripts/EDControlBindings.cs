using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml.Linq;
using UnityEngine;

namespace EVRC
{
    using IKeyPress = KeyboardInterface.IKeyPress;

    public class EDControlBindings
    {
        public static IKeyPress GetControlButton(EDControlButton control, KeyboardInterface.KeyCombo? defaultKeycombo = null)
        {
            var bindings = EDStateManager.instance.controlBindings;
            if (bindings == null)
            {
                Debug.LogWarning("Control bindings not loaded");
                return null;
            }
            else
            {
                var keyBinding = bindings.GetKeyboardKeybinding(control);
                string key = "";
                string[] modifiers = null;
                if (keyBinding == null)
                {
                    if (defaultKeycombo == null)
                    {
                        // XXX: Make this an error and add a warning that emits even when there is a default keycombo
                        Debug.LogWarningFormat("The \"{0}\" Elite Dangerous control has no keyboard binding and there is no default keycombo to fallback to", Enum.GetName(typeof(EDControlButton), control));
                        return null;
                    }
                }
                else
                {
                    key = keyBinding.Value.Key;
                    modifiers = keyBinding.Value.Modifiers.Select(mod => mod.Key).ToArray();
                }

                // @todo Implement this as a press and release
                var keyPress = KeyboardInterface.Key(key, modifiers);
                if (keyPress == null)
                {
                    Debug.LogWarningFormat(
                        "Could not send keypress {0}, did not understand one or more of the keys",
                        KeyboardInterface.KeyComboDebugString(key, modifiers));
                }

                return keyPress;
            }
        }

        // EDControlAxis and EDControlButton can be regenerated by opening the following repl
        // pasting your Custom.3.0.binds into it and hitting RUN.
        // https://repl.it/@dantman/EliteVRCockpitControls
        public enum EDControlAxis
        {
            YawAxisRaw,
            RollAxisRaw,
            PitchAxisRaw,
            LateralThrustRaw,
            VerticalThrustRaw,
            AheadThrust,
            YawAxisAlternate,
            RollAxisAlternate,
            PitchAxisAlternate,
            LateralThrustAlternate,
            VerticalThrustAlternate,
            ThrottleAxis,
            YawAxis_Landing,
            PitchAxis_Landing,
            RollAxis_Landing,
            LateralThrust_Landing,
            VerticalThrust_Landing,
            AheadThrust_Landing,
            RadarRangeAxis,
            HeadLookPitchAxisRaw,
            HeadLookYawAxis,
            CamPitchAxis,
            CamYawAxis,
            CamTranslateYAxis,
            CamTranslateXAxis,
            CamTranslateZAxis,
            CamZoomAxis,
            SteeringAxis,
            BuggyRollAxisRaw,
            BuggyPitchAxis,
            BuggyTurretYawAxisRaw,
            BuggyTurretPitchAxisRaw,
            DriveSpeedAxis,
            IncreaseSpeedButtonPartial,
            DecreaseSpeedButtonPartial,
            MultiCrewThirdPersonYawAxisRaw,
            MultiCrewThirdPersonPitchAxisRaw,
            MultiCrewThirdPersonFovAxisRaw,
            MoveFreeCamY,
            MoveFreeCamX,
            MoveFreeCamZ,
            MoveFreeCamUpAxis,
            MoveFreeCamDownAxis,
            PitchCamera,
            YawCamera,
            RollCamera,
            StorePitchCamera,
            StoreYawCamera,
            CommanderCreator_Rotation,
            ExplorationFSSCameraPitch,
            ExplorationFSSCameraYaw,
            ExplorationFSSRadioTuningX_Raw,
            ExplorationFSSRadioTuningAbsoluteX,
            SAAThirdPersonYawAxisRaw,
            SAAThirdPersonPitchAxisRaw,
            SAAThirdPersonFovAxisRaw,
        }

        public enum EDControlButton
        {
            MouseReset,
            YawLeftButton,
            YawRightButton,
            YawToRollButton,
            RollLeftButton,
            RollRightButton,
            PitchUpButton,
            PitchDownButton,
            LeftThrustButton,
            RightThrustButton,
            UpThrustButton,
            DownThrustButton,
            ForwardThrustButton,
            BackwardThrustButton,
            UseAlternateFlightValuesToggle,
            ToggleReverseThrottleInput,
            ForwardKey,
            BackwardKey,
            SetSpeedMinus100,
            SetSpeedMinus75,
            SetSpeedMinus50,
            SetSpeedMinus25,
            SetSpeedZero,
            SetSpeed25,
            SetSpeed50,
            SetSpeed75,
            SetSpeed100,
            YawLeftButton_Landing,
            YawRightButton_Landing,
            PitchUpButton_Landing,
            PitchDownButton_Landing,
            RollLeftButton_Landing,
            RollRightButton_Landing,
            LeftThrustButton_Landing,
            RightThrustButton_Landing,
            UpThrustButton_Landing,
            DownThrustButton_Landing,
            ForwardThrustButton_Landing,
            BackwardThrustButton_Landing,
            ToggleFlightAssist,
            UseBoostJuice,
            HyperSuperCombination,
            Supercruise,
            Hyperspace,
            DisableRotationCorrectToggle,
            OrbitLinesToggle,
            SelectTarget,
            CycleNextTarget,
            CyclePreviousTarget,
            SelectHighestThreat,
            CycleNextHostileTarget,
            CyclePreviousHostileTarget,
            TargetWingman0,
            TargetWingman1,
            TargetWingman2,
            SelectTargetsTarget,
            WingNavLock,
            CycleNextSubsystem,
            CyclePreviousSubsystem,
            TargetNextRouteSystem,
            PrimaryFire,
            SecondaryFire,
            CycleFireGroupNext,
            CycleFireGroupPrevious,
            DeployHardpointToggle,
            ToggleButtonUpInput,
            DeployHeatSink,
            ShipSpotLightToggle,
            RadarIncreaseRange,
            RadarDecreaseRange,
            IncreaseEnginesPower,
            IncreaseWeaponsPower,
            IncreaseSystemsPower,
            ResetPowerDistribution,
            HMDReset,
            ToggleCargoScoop,
            EjectAllCargo,
            LandingGearToggle,
            MicrophoneMute,
            UseShieldCell,
            FireChaffLauncher,
            ChargeECM,
            WeaponColourToggle,
            EngineColourToggle,
            NightVisionToggle,
            UIFocus,
            FocusLeftPanel,
            FocusCommsPanel,
            QuickCommsPanel,
            FocusRadarPanel,
            FocusRightPanel,
            GalaxyMapOpen,
            SystemMapOpen,
            ShowPGScoreSummaryInput,
            HeadLookToggle,
            Pause,
            FriendsMenu,
            OpenCodexGoToDiscovery,
            PlayerHUDModeToggle,
            ExplorationFSSEnter,
            UI_Up,
            UI_Down,
            UI_Left,
            UI_Right,
            UI_Select,
            UI_Back,
            UI_Toggle,
            CycleNextPanel,
            CyclePreviousPanel,
            CycleNextPage,
            CyclePreviousPage,
            HeadLookReset,
            HeadLookPitchUp,
            HeadLookPitchDown,
            HeadLookYawLeft,
            HeadLookYawRight,
            CamPitchUp,
            CamPitchDown,
            CamYawLeft,
            CamYawRight,
            CamTranslateForward,
            CamTranslateBackward,
            CamTranslateLeft,
            CamTranslateRight,
            CamTranslateUp,
            CamTranslateDown,
            CamZoomIn,
            CamZoomOut,
            CamTranslateZHold,
            GalaxyMapHome,
            ToggleDriveAssist,
            SteerLeftButton,
            SteerRightButton,
            BuggyRollLeftButton,
            BuggyRollRightButton,
            BuggyPitchUpButton,
            BuggyPitchDownButton,
            VerticalThrustersButton,
            BuggyPrimaryFireButton,
            BuggySecondaryFireButton,
            AutoBreakBuggyButton,
            HeadlightsBuggyButton,
            ToggleBuggyTurretButton,
            BuggyCycleFireGroupNext,
            BuggyCycleFireGroupPrevious,
            SelectTarget_Buggy,
            BuggyTurretYawLeftButton,
            BuggyTurretYawRightButton,
            BuggyTurretPitchUpButton,
            BuggyTurretPitchDownButton,
            BuggyToggleReverseThrottleInput,
            IncreaseSpeedButtonMax,
            DecreaseSpeedButtonMax,
            IncreaseEnginesPower_Buggy,
            IncreaseWeaponsPower_Buggy,
            IncreaseSystemsPower_Buggy,
            ResetPowerDistribution_Buggy,
            ToggleCargoScoop_Buggy,
            EjectAllCargo_Buggy,
            RecallDismissShip,
            UIFocus_Buggy,
            FocusLeftPanel_Buggy,
            FocusCommsPanel_Buggy,
            QuickCommsPanel_Buggy,
            FocusRadarPanel_Buggy,
            FocusRightPanel_Buggy,
            GalaxyMapOpen_Buggy,
            SystemMapOpen_Buggy,
            OpenCodexGoToDiscovery_Buggy,
            PlayerHUDModeToggle_Buggy,
            HeadLookToggle_Buggy,
            MultiCrewToggleMode,
            MultiCrewPrimaryFire,
            MultiCrewSecondaryFire,
            MultiCrewPrimaryUtilityFire,
            MultiCrewSecondaryUtilityFire,
            MultiCrewThirdPersonYawLeftButton,
            MultiCrewThirdPersonYawRightButton,
            MultiCrewThirdPersonPitchUpButton,
            MultiCrewThirdPersonPitchDownButton,
            MultiCrewThirdPersonFovOutButton,
            MultiCrewThirdPersonFovInButton,
            MultiCrewCockpitUICycleForward,
            MultiCrewCockpitUICycleBackward,
            OrderRequestDock,
            OrderDefensiveBehaviour,
            OrderAggressiveBehaviour,
            OrderFocusTarget,
            OrderHoldFire,
            OrderHoldPosition,
            OrderFollow,
            OpenOrders,
            PhotoCameraToggle,
            PhotoCameraToggle_Buggy,
            VanityCameraScrollLeft,
            VanityCameraScrollRight,
            ToggleFreeCam,
            VanityCameraOne,
            VanityCameraTwo,
            VanityCameraThree,
            VanityCameraFour,
            VanityCameraFive,
            VanityCameraSix,
            VanityCameraSeven,
            VanityCameraEight,
            VanityCameraNine,
            FreeCamToggleHUD,
            FreeCamSpeedInc,
            FreeCamSpeedDec,
            ToggleReverseThrottleInputFreeCam,
            MoveFreeCamForward,
            MoveFreeCamBackwards,
            MoveFreeCamRight,
            MoveFreeCamLeft,
            MoveFreeCamUp,
            MoveFreeCamDown,
            PitchCameraUp,
            PitchCameraDown,
            YawCameraLeft,
            YawCameraRight,
            RollCameraLeft,
            RollCameraRight,
            ToggleRotationLock,
            FixCameraRelativeToggle,
            FixCameraWorldToggle,
            QuitCamera,
            ToggleAdvanceMode,
            FreeCamZoomIn,
            FreeCamZoomOut,
            FStopDec,
            FStopInc,
            StoreEnableRotation,
            StoreCamZoomIn,
            StoreCamZoomOut,
            StoreToggle,
            CommanderCreator_Undo,
            CommanderCreator_Redo,
            CommanderCreator_Rotation_MouseToggle,
            GalnetAudio_Play_Pause,
            GalnetAudio_SkipForward,
            GalnetAudio_SkipBackward,
            GalnetAudio_ClearQueue,
            ExplorationFSSCameraPitchIncreaseButton,
            ExplorationFSSCameraPitchDecreaseButton,
            ExplorationFSSCameraYawIncreaseButton,
            ExplorationFSSCameraYawDecreaseButton,
            ExplorationFSSZoomIn,
            ExplorationFSSZoomOut,
            ExplorationFSSMiniZoomIn,
            ExplorationFSSMiniZoomOut,
            ExplorationFSSRadioTuningX_Increase,
            ExplorationFSSRadioTuningX_Decrease,
            ExplorationFSSDiscoveryScan,
            ExplorationFSSQuit,
            ExplorationFSSTarget,
            ExplorationFSSShowHelp,
            ExplorationSAAChangeScannedAreaViewToggle,
            ExplorationSAAExitThirdPerson,
            SAAThirdPersonYawLeftButton,
            SAAThirdPersonYawRightButton,
            SAAThirdPersonPitchUpButton,
            SAAThirdPersonPitchDownButton,
            SAAThirdPersonFovOutButton,
            SAAThirdPersonFovInButton,
            // Custom.4.0 additions
            TriggerFieldNeutralizer,
            VanityCameraTen,
            ExplorationSAANextGenus,
            ExplorationSAAPreviousGenus,
            ExplorationSAAShowHelp,
        }

        public static string EDControlFriendlyName(EDControlButton button)
        {
            string input = button.ToString();
            if (string.IsNullOrEmpty(input))
            {
                return string.Empty;
            }

            var result = new StringBuilder();
            var currentWord = new StringBuilder();
            char prevChar = char.MinValue;

            foreach (char c in input)
            {
                if (char.IsUpper(c))
                {
                    if (currentWord.Length > 0 && !char.IsUpper(prevChar))
                    {
                        result.Append(currentWord + " ");
                        currentWord.Clear();
                    }
                }
                else if (char.IsDigit(c))
                {
                    if (currentWord.Length > 0 && !char.IsDigit(prevChar))
                    {
                        result.Append(currentWord + " ");
                        currentWord.Clear();
                    }
                }
                else if (c == '_')
                {
                    if (currentWord.Length > 0)
                    {
                        result.Append(currentWord + " ");
                        currentWord.Clear();
                    }
                    continue;
                }
                else if (currentWord.Length >= 16)
                {
                    break;
                }

                currentWord.Append(c);
                prevChar = c;
            }

            if (currentWord.Length > 0)
            {
                result.Append(currentWord);
            }


            string MaybeShorten(string buttonName)
            {
                if (buttonName.Length < 20) { return buttonName; }

                List<(string, string)> replaceStrings = new List<(string, string)>()
                {
                    ("Exploration FSS", "FSS"),
                    ("Exploration SAA", "SAA"),
                    ("Button", "Btn"),
                    ("Commander", "Cmdr"),
                    ("Alternate", "Alt"),
                    ("Distribution", "Dist"),
                    ("Previous", "Prev"),
                    ("Combination", "Combo"),
                    ("Forward", "Fwd"),
                    ("Backward", "Back"),
                    ("Next", "Nxt"),
                    ("Power", "Pwr"),
                    ("Disable", "Kill"),
                    ("Increase", "Raise"),
                    ("Decrease", "Lower"),
                    ("Buggy", "SRV"),
                    ("Panel", "Pane"),
                    ("Vertical", "Vert"),
                    ("Cycle", ""),
                    ("Multi Crew", "Crew"),
                    ("Utility", "Util"),
                    ("Camera", "Cam"),
                    ("Reverse", "Flip"),
                    ("Aggressive", "Agg"),
                    ("Defensive", "Def"),
                    ("Lower", "Down"),
                    ("Toggle", ""),
                    ("Landing", ""),
                    ("Audio", ""),
                    ("Third Person", "Cam"),
                    ("Target", "Tgt"),
                    ("Increase", "Add"),
                    ("Decrease", "Less"),
                };

                for (int i = 0; i < replaceStrings.Count; i++)
                {
                    if (buttonName.Length < 20) { return buttonName; }
                    buttonName = buttonName.Replace(replaceStrings[i].Item1, replaceStrings[i].Item2);
                }
                return buttonName;

            }

            return MaybeShorten(result.ToString()).Trim();
        }

        public struct ControlButtonBinding
        {
            public struct KeyModifier
            {
                public string Device;
                public string Key;
            }

            public struct KeyBinding
            {
                public string Device;
                public string Key;
                //public string DeviceIndex;
                public HashSet<KeyModifier> Modifiers;

                public bool IsValid
                {
                    get { return Device != "{NoDevice}"; }
                }

                // Is this a Keyboard key press we can act on?
                public bool IsValidKeypress
                {
                    get
                    {
                        // Is it on the Keyboard device?
                        if (Device != "Keyboard") return false;

                        foreach (var modifier in Modifiers)
                        {
                            if (modifier.Device != "Keyboard") return false;
                        }

                        return true;
                    }
                }

                // Is there a VJoy action we can act on?
                public bool IsValidVJoyPress
                {
                    get
                    {
                        // Is it on the vJoy device?
                        if (Device != "vJoy") return false;
                        if (Modifiers.Count > 0) return false;
                        return true;
                    }
                }
            }

            public KeyBinding Primary;
            public KeyBinding Secondary;

            public bool HasKeyboardKeybinding
            {
                get
                {
                    return Primary.IsValidKeypress || Secondary.IsValidKeypress;
                }
            }

            public bool HasVJoyKeybinding
            {
                get
                {
                    return Primary.IsValidVJoyPress || Secondary.IsValidVJoyPress;
                }
            }

            public KeyBinding? KeyboardKeybinding
            {
                get
                {
                    if (Primary.IsValidKeypress) return Primary;
                    if (Secondary.IsValidKeypress) return Secondary;
                    return null;
                }
            }

            public KeyBinding? VJoyKeybinding
            {
                get
                {
                    if (Primary.IsValidVJoyPress) return Primary;
                    if (Secondary.IsValidVJoyPress) return Secondary;
                    return null;
                }
            }
        }

        private Dictionary<EDControlButton, ControlButtonBinding> buttonBindings = new Dictionary<EDControlButton, ControlButtonBinding>();

        private EDControlBindings() { }

        /// <summary>
        ///     Checks to see if there is a valid binding for a keyboard, based on the device that is listed in the XML
        /// </summary>
        /// <param name="button"></param>
        /// <returns> True if valid keyboard binding </returns>
        public bool HasKeyboardKeybinding(EDControlButton button)
        {
            if (!buttonBindings.ContainsKey(button)) return false;

            var buttonBinding = buttonBindings[button];
            return buttonBinding.HasKeyboardKeybinding;
        }
        
        /// <summary>
        ///     Checks to see if there is a valid binding for vJoy, based on the device that is listed in the XML
        /// </summary>
        /// <param name="button"></param>
        /// <returns> True if valid vJoy binding </returns>
        public bool HasVJoyKeybinding(EDControlButton button)
        {
            if (!buttonBindings.ContainsKey(button)) return false;

            var buttonBinding = buttonBindings[button];
            return buttonBinding.HasVJoyKeybinding;
        }

        /// <summary>
        /// Gets the first binding that is configured on the keyboard device. 
        /// </summary>
        /// <remarks>
        /// Checks both Primary and Secondary bindings for the key, but will only return the Secondary value if the Primary binding is not for the keyboard and/or is invalid.
        /// </remarks>
        /// <param name="button">Elite Dangerous command from Custom.X.0.binds</param>
        public ControlButtonBinding.KeyBinding? GetKeyboardKeybinding(EDControlButton button)
        {
            if (buttonBindings.ContainsKey(button))
            {
                var buttonBinding = buttonBindings[button];
                return buttonBinding.KeyboardKeybinding;
            }

            return null;
        }

        /// <summary>
        /// Gets the first binding that is configured on the vJoy device for a given Elite Dangerous control. 
        /// </summary>
        /// <remarks>
        /// Checks both Primary and Secondary bindings for the key, but will only return the Secondary value if the Primary binding is not for the keyboard and/or is invalid.
        /// </remarks>
        /// <param name="button">Elite Dangerous command from Custom.X.0.binds</param>
        public ControlButtonBinding.KeyBinding? GetVJoyKeybinding(EDControlButton button)
        {
            if (buttonBindings.ContainsKey(button))
            {
                var buttonBinding = buttonBindings[button];
                return buttonBinding.VJoyKeybinding;
            }

            return null;
        }

        public Dictionary<EDControlButton, ControlButtonBinding> GetAllVJoyBindings()
        {   
            if (buttonBindings != null)
            {
                return buttonBindings
                        .Where(binding => binding.Value.HasVJoyKeybinding)
                        .ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
            }
            else
            {
                throw new Exception("buttonBindings is null");
            }
        }

        public static EDControlBindings Empty()
        {
            return new EDControlBindings();
        }

        public static EDControlBindings ParseFile(string customBindingsOptionsPath)
        {
            var bindings = new EDControlBindings();

            var doc = XDocument.Load(customBindingsOptionsPath);
            foreach (var control in doc.Descendants())
            {
                if (Enum.IsDefined(typeof(EDControlButton), control.Name.LocalName))
                {
                    var controlButton = (EDControlButton)Enum.Parse(typeof(EDControlButton), control.Name.LocalName);

                    var controlBinding = new ControlButtonBinding
                    {
                        Primary = ParseControlBinding(control, "Primary"),
                        Secondary = ParseControlBinding(control, "Secondary")
                    };

                    if (!bindings.buttonBindings.ContainsKey(controlButton))
                    {
                        bindings.buttonBindings.Add(controlButton, controlBinding);
                    }
                }

                // @todo Parse axis and options if we ever have a use for them
            }

            return bindings;
        }

        private static ControlButtonBinding.KeyBinding ParseControlBinding(XElement control, string nodeName)
        {
            var node = (from el in control.Descendants(nodeName) select el).First();
            var keyBinding = new ControlButtonBinding.KeyBinding
            {
                Device = GetAttributeValue(node, "Device"),
                Key = GetAttributeValue(node, "Key"),
                Modifiers = new HashSet<ControlButtonBinding.KeyModifier>(),
            };

            foreach (var modifier in node.Descendants("Modifier"))
            {
                keyBinding.Modifiers.Add(new ControlButtonBinding.KeyModifier
                {
                    Device = GetAttributeValue(modifier, "Device"),
                    Key = GetAttributeValue(modifier, "Key"),
                });
            }

            return keyBinding;
        }

        private static string GetAttributeValue(XElement el, string localName)
        {
            localName = localName.ToLowerInvariant();
            return el.Attributes().First(attr => attr.Name.LocalName.ToLowerInvariant() == localName).Value;
        }
    }

}
